# -*- coding: utf-8 -*-
"""coin_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1510fjnoE661q5Ic84YWu5ay4QIiNcwGr
"""

import requests
import json

url = "https://api.upbit.com/v1/ticker"

querystring = {"markets":"KRW-BTC"}

response = requests.request("GET", url, params=querystring)

res_json = response.json()

print(res_json[0]['market'], "의 현재가는 ", res_json[0]['trade_price'], "원 입니다.")
print(res_json[0]['market'], "의 오늘 시가는 ", res_json[0]['opening_price'], "원 입니다.")
print(res_json[0]['market'], "의 전일 종가는 ", res_json[0]['prev_closing_price'], "원 입니다.")
print(res_json[0]['market'], "의 최고가는 ", res_json[0]['high_price'], "원 입니다.")
print(res_json[0]['market'], "의 최저가는 ", res_json[0]['low_price'], "원 입니다.")

import pandas as pd
import numpy as np
import os
import jwt
import uuid
import hashlib
from urllib.parse import urlencode
import requests
import json
import datetime

import matplotlib as mpl
import matplotlib.pylab as plt

def get_coin_price(coin_name, min_):
    print(datetime.datetime.today())

    market = "KRW-" + coin_name
    url = "https://api.upbit.com/v1/candles/minutes/1"
    querystring = {"market":market,"count":min_}
    headers = {"Accept": "application/json"}
    response = requests.request("GET", url, headers=headers, params=querystring)

    sec = datetime.datetime.today().second
    microsec = datetime.datetime.today().microsecond

    min_price = pd.DataFrame(json.loads(response.text))
    min_price = min_price.sort_values('candle_date_time_kst')

    min_price['second'] = sec
    min_price['microsecond'] = microsec
    min_price['high_low'] = (min_price['high_price'] - min_price['low_price']) / min_price['trade_price']
    min_price['trade_low'] = (min_price['trade_price'] - min_price['low_price']) / min_price['trade_price']
    min_price['high_trade'] = (min_price['high_price'] - min_price['trade_price']) / min_price['trade_price']

    return min_price

def price_plt(df):
    data = df
    df['min'] = df['candle_date_time_kst'].str.split('T', expand = True)[1].str.replace(':00', '')

    fig, axes = plt.subplots(2, 1, figsize=(20, 10), facecolor="#c1f1f1")
    axes[0].set_title("Price", fontsize=16)
    axes[0].plot(data['min'], data['trade_price'], color='green', marker='o', linestyle='dashed', linewidth=2, markersize=5, label='trade')
    axes[0].plot(data['min'], data['high_price'], color='red', marker='o',linewidth=1.5, markersize=5, label='high')
    axes[0].plot(data['min'], data['low_price'], color='blue', marker='o',linewidth=1.5, markersize=5, label='low')
    axes[0].legend()

    axes[1].set_title("Ratio", fontsize=16)
    axes[1].plot(data['min'], data['high_low'], color='black', marker='o', linestyle='dashed', linewidth=2, markersize=5, label = 'high-low')
    axes[1].plot(data['min'], data['high_trade'], color='pink', marker='o',linewidth=1.5, markersize=5, label='high-trade')
    axes[1].plot(data['min'], data['trade_low'], color='orange', marker='o',linewidth=1.5, markersize=5, label='trade-low')
    axes[1].legend()

coin_name, min_ = 'BTC',30
df = get_coin_price(coin_name, min_)
price_plt(df)

df.head()

df.to_csv('coinchart.csv', header = True, index = False)